from nltk.corpus import cmudict
from nltk import tokenize
from Utility import Utility

# Generates a list of words that aren't already in the CMUdict and writes to a
# file for use with the LOGIOS lexicon tool at 
# http://www.speech.cs.cmu.edu/tools/lextool.html
# to generate pronunciations for the remaining words
def write_words_file(filename):
	lines, word_map = Utility.load_shakespeare()
	bad_words = []
	d = cmudict.dict()
	for word in word_map.keys():
		try:
			d[word]
		except KeyError:
			bad_words.append(word)
	
	with open(filename, "w") as f:
		for word in bad_words:
			f.write(word + '\n')

# Takes in a dictionary file generated by the LOGIOS tool, and generates a 
# supplementary dictionary for words not found in the CMUdict
def load_dict_from_file(filename):
	d = {}
	with open(filename, "r") as f:
		while True:
			line = f.readline()
			if line == "":
				break
			word, pron = line.split('\t')
			pron = pron.strip('\n')
			pron_list = pron.split(' ')
			d[word.lower()] = pron_list
	return d

# Updates a pronunciation dictionary with vowel stresses, for the sake of 
# simplicity, assigns a strong stress to every vowel sound
def update_vowels(d):
	vowel_sounds = ['AA', 'AE', 'AH', 'AO', 'AW', 'AY', 'EH', 'ER', 'EY', 'IH',\
					'IY', 'OW', 'OY', 'UH', 'UW']
	for word, syls in d.items():
		for i in range(len(syls)):
			if syls[i] in vowel_sounds:
				syls[i] = syls[i] + str(1)
		d.update({word:syls})

if __name__ == "__main__":
	d = load_dict_from_file("dict_supp.txt")
	update_vowels(d)
	print(d)